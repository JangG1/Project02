{"ast":null,"code":"import axios from 'axios';\nimport Vuex from \"vuex\";\nimport router from \"./router.js\";\nimport createPersistedState from 'vuex-persistedstate';\nexport const store = new Vuex.Store({\n  plugins: [createPersistedState({\n    paths: ['userInfo', 'access_token', 'refresh_token', 'isLogin', 'isLoginError']\n  })],\n  // counter라는 state 속성을 추가\n  state: {\n    access_token: '',\n    refresh_token: '',\n    userInfo: null,\n    isLogin: false,\n    isLoginError: false\n  },\n  mutations: {\n    setToken(state, payload) {\n      localStorage.setItem(\"access_token\", payload.data.access_token);\n      localStorage.setItem(\"refresh_token\", payload.data.refresh_token);\n      state.access_token = payload.data.access_token;\n      state.refresh_token = payload.data.refresh_token;\n    },\n\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n\n    loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = true;\n      state.userInfo = null;\n    },\n\n    logout(state) {\n      localStorage.clear();\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    }\n\n  },\n  actions: {\n    async setUserInfo({\n      commit\n    }, payload) {\n      let userInfo = {\n        email: payload.email,\n        profile: payload.profile\n      };\n      commit(\"loginSuccess\", userInfo);\n    },\n\n    async getToken({\n      commit\n    }, loginObj) {\n      await axios.post(\"/api/login\", loginObj).then(res => {\n        console.log(res);\n        commit('setToken', res);\n      }).catch(err => {\n        console.log(err);\n        commit(\"loginError\");\n        alert(\"이메일과 비밀번호를 확인하세요.\");\n      });\n    },\n\n    async getRefreshToken({\n      commit\n    }) {\n      console.log(\"getRefreshToken call\");\n      if (!Object.prototype.hasOwnProperty.call(localStorage, \"access_token\")) return;\n      let config = {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('refresh_token')\n        }\n      };\n      await axios.post(\"/api/token/refresh\", config).then(res => {\n        console.log(res);\n        commit('setToken', res);\n      }).catch(err => {\n        console.log('refreshToken error : ', err.config);\n        commit('logout');\n      });\n    },\n\n    logout({\n      commit\n    }) {\n      commit(\"logout\");\n      router.push({\n        name: \"Home\"\n      });\n    }\n\n  }\n});","map":{"version":3,"sources":["C:/study_boot/BCPR3/front_vue2/src/store.js"],"names":["axios","Vuex","router","createPersistedState","store","Store","plugins","paths","state","access_token","refresh_token","userInfo","isLogin","isLoginError","mutations","setToken","payload","localStorage","setItem","data","loginSuccess","loginError","logout","clear","actions","setUserInfo","commit","email","profile","getToken","loginObj","post","then","res","console","log","catch","err","alert","getRefreshToken","Object","prototype","hasOwnProperty","call","config","headers","Authorization","getItem","push","name"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport Vuex from \"vuex\";\r\nimport router from \"./router.js\"\r\nimport createPersistedState from 'vuex-persistedstate';\r\n\r\n\r\nexport const store = new Vuex.Store({\r\n    plugins: [\r\n        createPersistedState({\r\n            paths: ['userInfo', 'access_token', 'refresh_token', 'isLogin', 'isLoginError']\r\n        })\r\n    ],\r\n    // counter라는 state 속성을 추가\r\n\r\n    state: {\r\n        access_token: '',\r\n        refresh_token: '',\r\n        userInfo: null,\r\n        isLogin: false,\r\n        isLoginError: false,\r\n    },\r\n    mutations: {\r\n        setToken(state, payload) {\r\n            localStorage.setItem(\"access_token\", payload.data.access_token);\r\n            localStorage.setItem(\"refresh_token\", payload.data.refresh_token);\r\n            state.access_token = payload.data.access_token\r\n            state.refresh_token = payload.data.refresh_token\r\n        },\r\n        loginSuccess(state, payload) {\r\n            state.isLogin = true\r\n            state.isLoginError = false\r\n            state.userInfo = payload\r\n        },\r\n        loginError(state) {\r\n            state.isLogin = false\r\n            state.isLoginError = true\r\n            state.userInfo = null\r\n        },\r\n        logout(state) {\r\n            localStorage.clear();\r\n            state.isLogin = false\r\n            state.isLoginError = false\r\n            state.userInfo = null\r\n        },\r\n    },\r\n    actions: {\r\n        async setUserInfo({ commit }, payload) {\r\n            let userInfo = {\r\n                email: payload.email,\r\n                profile: payload.profile\r\n            }\r\n            commit(\"loginSuccess\", userInfo)\r\n        },\r\n        async getToken({ commit }, loginObj) {\r\n            await axios\r\n                .post(\"/api/login\", loginObj)\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    commit('setToken', res)\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    commit(\"loginError\")\r\n                    alert(\"이메일과 비밀번호를 확인하세요.\")\r\n                });\r\n        },\r\n        async getRefreshToken({ commit }) {\r\n            console.log(\"getRefreshToken call\");\r\n            if (!Object.prototype.hasOwnProperty.call(localStorage, \"access_token\"))\r\n                return;\r\n            let config = {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + localStorage.getItem('refresh_token')\r\n                }\r\n            }\r\n            await axios\r\n                .post(\"/api/token/refresh\", config)\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    commit('setToken', res)\r\n                }).catch((err) => {\r\n                    console.log('refreshToken error : ', err.config);\r\n                    commit('logout')\r\n                });\r\n        },\r\n        logout({ commit }) {\r\n            commit(\"logout\")\r\n            router.push({ name: \"Home\" })\r\n        },\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}